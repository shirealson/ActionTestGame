--abs_divider DEN_REPRESENTATION="SIGNED" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="SIGNED" SKIP_BITS=0 WIDTH_D=8 WIDTH_N=16 denominator numerator quotient remainder
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_abs 2008:05:19:10:51:43:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_divide 2008:05:21:18:11:28:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION alt_u_div_nle (denominator[7..0], numerator[15..0])
RETURNS ( quotient[15..0], remainder[7..0]);
FUNCTION lpm_abs_cd9 (data[7..0])
RETURNS ( overflow, result[7..0]);
FUNCTION lpm_abs_re9 (data[15..0])
RETURNS ( overflow, result[15..0]);
FUNCTION add_sub_r0f (cin, dataa[15..0], datab[15..0])
RETURNS ( result[15..0]);
FUNCTION add_sub_cve (cin, dataa[7..0], datab[7..0])
RETURNS ( result[7..0]);

--synthesis_resources = lut 50 
SUBDESIGN abs_divider_pbg
( 
	denominator[7..0]	:	input;
	numerator[15..0]	:	input;
	quotient[15..0]	:	output;
	remainder[7..0]	:	output;
) 
VARIABLE 
	divider : alt_u_div_nle;
	my_abs_den : lpm_abs_cd9;
	my_abs_num : lpm_abs_re9;
	compl_add_quot : add_sub_r0f;
	compl_add_rem : add_sub_cve;
	diff_signs	: WIRE;
	gnd_wire	: WIRE;
	neg_quot[15..0]	: WIRE;
	neg_rem[7..0]	: WIRE;
	norm_den[7..0]	: WIRE;
	norm_num[15..0]	: WIRE;
	num_sign	: WIRE;
	protect_quotient[15..0]	: WIRE;
	protect_remainder[7..0]	: WIRE;
	vcc_wire	: WIRE;

BEGIN 
	divider.denominator[] = norm_den[];
	divider.numerator[] = norm_num[];
	my_abs_den.data[] = denominator[];
	my_abs_num.data[] = numerator[];
	compl_add_quot.cin = vcc_wire;
	compl_add_quot.dataa[] = (! protect_quotient[]);
	compl_add_quot.datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	compl_add_rem.cin = vcc_wire;
	compl_add_rem.dataa[] = (! protect_remainder[]);
	compl_add_rem.datab[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	diff_signs = (numerator[15..15] $ denominator[7..7]);
	gnd_wire = B"0";
	neg_quot[] = compl_add_quot.result[];
	neg_rem[] = compl_add_rem.result[];
	norm_den[] = my_abs_den.result[];
	norm_num[] = my_abs_num.result[];
	num_sign = numerator[15..15];
	protect_quotient[] = divider.quotient[];
	protect_remainder[] = divider.remainder[];
	quotient[] = ((protect_quotient[] & (! diff_signs)) # (neg_quot[] & diff_signs));
	remainder[] = ((protect_remainder[] & (! num_sign)) # (neg_rem[] & num_sign));
	vcc_wire = B"1";
END;
--VALID FILE
